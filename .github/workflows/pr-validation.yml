name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18'

jobs:
  # Quick validation for draft PRs
  validate:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.js
            **/*.json
            **/*.md
            **/package*.json
            **/Dockerfile*
            **/docker-compose*.yml
            **/*.sql

      - name: PR Size Check
        run: |
          echo "📊 Analyzing PR size..."
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files_count }}"
          ADDED_LINES=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{added += $1} END {print added+0}')
          DELETED_LINES=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{deleted += $2} END {print deleted+0}')
          
          echo "Files changed: $CHANGED_FILES"
          echo "Lines added: $ADDED_LINES"
          echo "Lines deleted: $DELETED_LINES"
          
          # Add to job summary
          echo "## PR Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Files Changed | $CHANGED_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines Added | $ADDED_LINES |" >> $GITHUB_STEP_SUMMARY
          echo "| Lines Deleted | $DELETED_LINES |" >> $GITHUB_STEP_SUMMARY
          
          # Warning for large PRs
          if [ $CHANGED_FILES -gt 20 ] || [ $ADDED_LINES -gt 1000 ]; then
            echo "⚠️ **Large PR detected!** Consider breaking into smaller PRs for easier review." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for breaking changes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "🔍 Checking for potential breaking changes..."
          
          # Check if database schema files changed
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "\.sql"; then
            echo "⚠️ Database schema changes detected in PR" >> $GITHUB_STEP_SUMMARY
            echo "Please ensure backward compatibility and include migration notes." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if Docker files changed
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "Dockerfile\|docker-compose"; then
            echo "🐳 Docker configuration changes detected" >> $GITHUB_STEP_SUMMARY
            echo "Please verify deployment compatibility." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if package.json changed
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "package.*\.json"; then
            echo "📦 Dependency changes detected" >> $GITHUB_STEP_SUMMARY
            echo "Please review security implications of new dependencies." >> $GITHUB_STEP_SUMMARY
          fi

  # Fast security scan for PRs
  pr-security:
    name: PR Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quick security audit
        run: |
          echo "🔍 Running quick security check..."
          
          # Check for obvious security issues
          if npm audit --audit-level=high; then
            echo "✅ No high-severity security issues found"
          else
            echo "❌ High-severity security issues found!"
            echo "Please run 'make security' locally to see details"
            exit 1
          fi

      - name: Check for secrets in PR
        run: |
          echo "🔐 Scanning PR for potential secrets..."
          
          # Get the diff for this PR
          git diff origin/${{ github.base_ref }}...HEAD > pr-diff.txt
          
          # Look for potential secrets in the diff
          if grep -i "password\|secret\|key\|token" pr-diff.txt | grep -v "test\|example\|placeholder"; then
            echo "❌ Potential secrets found in PR changes!"
            echo "Please review the changes and ensure no sensitive data is included."
            exit 1
          else
            echo "✅ No potential secrets found in PR"
          fi

  # Fast test for critical paths
  pr-test:
    name: PR Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: radiocalico_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests && npm ci

      - name: Setup test database
        env:
          PGPASSWORD: test_password
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          psql -h localhost -U postgres -d radiocalico_test -f init-db.sql

      - name: Run critical tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: test_password
          DB_NAME: radiocalico_test
          JWT_SECRET: test-jwt-secret-for-github-actions
        run: |
          echo "🧪 Running critical path tests..."
          cd tests
          
          # Run just the most important tests for quick feedback
          if [ -f "test/critical.test.js" ]; then
            npm test -- --grep "critical"
          else
            # Run all tests but with shorter timeout
            timeout 300 npm test || echo "Tests took too long or failed"
          fi

  # Comment on PR with results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [validate, pr-security, pr-test]
    if: always() && github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get job results
            const validateResult = '${{ needs.validate.result }}';
            const securityResult = '${{ needs.pr-security.result }}';
            const testResult = '${{ needs.pr-test.result }}';
            
            // Create status indicators
            const getStatusIcon = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const body = `## 🤖 PR Validation Results
            
            | Check | Status | Result |
            |-------|--------|--------|
            | PR Validation | ${getStatusIcon(validateResult)} | ${validateResult} |
            | Security Check | ${getStatusIcon(securityResult)} | ${securityResult} |
            | Critical Tests | ${getStatusIcon(testResult)} | ${testResult} |
            
            ### Next Steps
            ${securityResult === 'failure' ? '⚠️ **Security issues found** - Please address security concerns before merging.\n' : ''}
            ${testResult === 'failure' ? '⚠️ **Tests failed** - Please fix failing tests before merging.\n' : ''}
            ${validateResult === 'success' && securityResult === 'success' && testResult === 'success' ? '🎉 **All checks passed!** This PR is ready for review.\n' : ''}
            
            > Full CI/CD pipeline will run after approval. Check the [Actions tab](${context.payload.repository.html_url}/actions) for detailed results.
            
            <sub>🤖 This comment is automatically updated on every push.</sub>`;
            
            // Look for existing comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body,
              });
            }

  # Auto-assign reviewers based on changed files
  auto-assign:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40

      - name: Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Define code owners (adjust based on your team)
            const codeOwners = {
              'server.js': ['@backend-team'],
              'Dockerfile': ['@devops-team'],
              'docker-compose*.yml': ['@devops-team'],
              '*.sql': ['@database-team'],
              'tests/**': ['@qa-team'],
              'docs/**': ['@docs-team'],
              'README.md': ['@docs-team']
            };
            
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}';
            const reviewers = new Set();
            
            // Add reviewers based on changed files
            for (const [pattern, owners] of Object.entries(codeOwners)) {
              if (changedFiles.includes(pattern.replace('*', ''))) {
                owners.forEach(owner => reviewers.add(owner.replace('@', '')));
              }
            }
            
            // Convert set to array and limit to 3 reviewers max
            const reviewerList = Array.from(reviewers).slice(0, 3);
            
            if (reviewerList.length > 0) {
              console.log('Auto-assigning reviewers:', reviewerList);
              
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: number,
                  reviewers: reviewerList
                });
              } catch (error) {
                console.log('Could not auto-assign reviewers:', error.message);
                // Don't fail the workflow if reviewer assignment fails
              }
            }
