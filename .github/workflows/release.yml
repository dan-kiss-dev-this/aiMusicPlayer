name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version information
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            # Check if this is a prerelease (contains alpha, beta, rc)
            if echo "$VERSION" | grep -E "(alpha|beta|rc)" > /dev/null; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Remove 'v' prefix if present
          CLEAN_VERSION=${VERSION#v}
          
          # Validate semantic version format
          if ! echo "$CLEAN_VERSION" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$" > /dev/null; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag already exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          if git tag -l | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          
          echo "✅ Tag $VERSION is available"

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-release
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: radiocalico_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "📦 Installing production dependencies..."
          npm ci --only=production
          
          echo "📦 Installing all dependencies for testing..."
          npm ci

      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=high

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run tests
        if: hashFiles('tests/package.json')
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: test_password
          DB_NAME: radiocalico_test
          JWT_SECRET: test-secret-for-release
        run: |
          echo "🧪 Running test suite..."
          cd tests
          npm ci
          npm test

      - name: Build application
        run: |
          echo "🔨 Building application..."
          
          # If you have a build script, run it
          if npm run build --if-present; then
            echo "✅ Build completed successfully"
          else
            echo "ℹ️ No build script found, skipping"
          fi

      - name: Test production startup
        env:
          NODE_ENV: production
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: test_password
          DB_NAME: radiocalico_test
          JWT_SECRET: test-secret-for-release
        run: |
          echo "🚀 Testing production startup..."
          
          # Start application in background
          timeout 30s node server.js &
          APP_PID=$!
          
          # Wait for startup
          sleep 10
          
          # Test health endpoint
          if curl -f http://localhost:3000/health >/dev/null 2>&1; then
            echo "✅ Production startup test passed"
          else
            echo "❌ Production startup test failed"
            exit 1
          fi
          
          # Cleanup
          kill $APP_PID 2>/dev/null || true

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate-release.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Generate release notes
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
            
            # Generate changelog using git log
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "No previous tag found, generating changelog from beginning"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create formatted changelog
          cat > changelog.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Docker Images
          
          - \`ghcr.io/${{ github.repository }}:$VERSION\`
          - \`ghcr.io/${{ github.repository }}:latest\`
          
          ## Installation
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`
          
          ### From Source
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd aiMusicPlayer
          git checkout $VERSION
          npm install
          npm start
          \`\`\`
          EOF
          
          # Set output
          echo "changelog<<CHANGELOG_EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "CHANGELOG_EOF" >> $GITHUB_OUTPUT

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, build-docker, generate-changelog]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Radio Calico ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

  # Deploy to production (optional)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "🚀 Deploying Radio Calico ${{ needs.validate-release.outputs.version }} to production..."
          echo "This is where you would add your deployment steps"
          
          # Example deployment steps:
          # - Deploy to cloud provider (AWS, GCP, Azure)
          # - Update Kubernetes manifests
          # - Trigger deployment pipeline
          # - Update production environment variables
          
          echo "✅ Deployment placeholder completed"

  # Notify about release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Notify success
        run: |
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} created successfully!"
          echo "📦 Docker image: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}"
          echo "🔗 Release page: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"

  # Cleanup on failure
  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, build-docker, create-release]
    if: always() && (needs.build-and-test.result == 'failure' || needs.build-docker.result == 'failure' || needs.create-release.result == 'failure')
    
    steps:
      - name: Cleanup failed release
        run: |
          echo "💥 Release process failed, cleaning up..."
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # If this was a manual dispatch, remove the tag we created
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Removing tag $VERSION due to failed release"
            # Note: You might want to add actual cleanup logic here
          fi
          
          echo "❌ Release $VERSION failed and has been cleaned up"
          exit 1

  # Release summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, build-docker, create-release, deploy-production]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "## 🚀 Radio Calico Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "**Release:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** $([ "$IS_PRERELEASE" == "true" ] && echo "Pre-release" || echo "Stable release")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-release.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$IS_PRERELEASE" == "false" ]; then
            echo "| Production Deploy | ${{ needs.deploy-production.result == 'success' && '✅ Deployed' || needs.deploy-production.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "🎉 **Release $VERSION created successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. 📦 Pull the Docker image: \`docker pull ghcr.io/${{ github.repository }}:$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "2. 🔗 View the release: [Release Page](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
            echo "3. 📋 Review the changelog and notify users" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release failed.** Please check the logs and try again." >> $GITHUB_STEP_SUMMARY
          fi