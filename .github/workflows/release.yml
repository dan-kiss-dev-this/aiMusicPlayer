name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  
  # Allow manual release creation
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release
  validate_release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_notes: ${{ steps.changelog.outputs.release_notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION is available"

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract release notes from CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            # Look for the version section
            RELEASE_NOTES=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "")
            
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES="Release $VERSION\n\nSee commit history for detailed changes."
            fi
          else
            RELEASE_NOTES="Release $VERSION\n\nSee commit history for detailed changes."
          fi
          
          # Save to file for multiline output
          echo "$RELEASE_NOTES" > release-notes.txt
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Run full test suite before release
  pre_release_tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: [validate_release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests && npm ci

      - name: Run tests
        run: |
          echo "🧪 Running full test suite before release..."
          cd tests
          npm test

  # Build release artifacts
  build_artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate_release, pre_release_tests]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create source archive
        run: |
          VERSION="${{ needs.validate_release.outputs.version }}"
          
          # Create clean source archive
          git archive --format=tar.gz --prefix=radiocalico-${VERSION}/ HEAD > radiocalico-${VERSION}-source.tar.gz
          
          # Create checksums
          sha256sum radiocalico-${VERSION}-source.tar.gz > radiocalico-${VERSION}-source.tar.gz.sha256

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-archives
          path: |
            radiocalico-*.tar.gz
            radiocalico-*.sha256
          retention-days: 90

  # Security scan for release
  release_security:
    name: Release Security Scan
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy scanner on release image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate_release.outputs.version }}'
          format: 'sarif'
          output: 'release-security-scan.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'release-security-scan.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate_release.outputs.version }}'
          format: 'json'
          output: 'release-vulnerabilities.json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Create GitHub release
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate_release, build_artifacts, release_security]
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: source-archives

      - name: Create or update tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate_release.outputs.version }}"
          git tag "$VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate_release.outputs.version }}
          name: Release ${{ needs.validate_release.outputs.version }}
          body: ${{ needs.validate_release.outputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release == 'true' || contains(needs.validate_release.outputs.version, 'rc') || contains(needs.validate_release.outputs.version, 'beta') || contains(needs.validate_release.outputs.version, 'alpha') }}
          files: |
            radiocalico-*.tar.gz
            radiocalico-*.sha256
          generate_release_notes: true

  # Deploy to staging (if configured)
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create_release]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          
          # This would typically involve:
          # - SSH to staging server
          # - Pull new Docker image
          # - Update docker-compose with new version
          # - Restart services
          # - Run health checks
          
          echo "✅ Staging deployment would happen here"
          echo "Example command: docker-compose pull && docker-compose up -d"

  # Notify on release
  notify_release:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [validate_release, create_release, deploy_staging]
    if: always() && needs.create_release.result == 'success'
    
    steps:
      - name: Create release summary
        run: |
          echo "# 🎉 Release ${{ needs.validate_release.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.validate_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate_release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Notes:** [View on GitHub](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${{ needs.validate_release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Release Page](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${{ needs.validate_release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🐳 Container Images](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/pkgs/container/radio-calico)" >> $GITHUB_STEP_SUMMARY
          echo "- [📚 Documentation](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/main/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🚀 Deployment Guide](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/main/docs/DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY

      - name: Post release comment
        uses: actions/github-script@v7
        with:
          script: |
            // Find recent PRs that might be related to this release
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const recentPRs = prs.filter(pr => 
              pr.merged_at && 
              new Date(pr.merged_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
            );
            
            if (recentPRs.length > 0) {
              const prList = recentPRs.map(pr => `- #${pr.number}: ${pr.title}`).join('\n');
              
              const comment = `
              ## 🎉 Release ${{ needs.validate_release.outputs.version }} is now available!
              
              This release includes changes from the following recent PRs:
              
              ${prList}
              
              ### 📦 Installation
              
              **Docker:**
              \`\`\`bash
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate_release.outputs.version }}
              \`\`\`
              
              **Source:**
              Download from the [releases page](${context.payload.repository.html_url}/releases/tag/${{ needs.validate_release.outputs.version }})
              
              ### 🚀 Deployment
              
              See our [deployment guide](${context.payload.repository.html_url}/blob/main/docs/DEPLOYMENT.md) for detailed instructions.
              
              Thank you to all contributors! 🙏
              `;
              
              // Comment on recent PRs
              for (const pr of recentPRs.slice(0, 3)) {  // Limit to 3 most recent
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: comment
                });
              }
            }

  # Cleanup on failure
  cleanup_on_failure:
    name: Cleanup Failed Release
    runs-on: ubuntu-latest
    needs: [validate_release, create_release]
    if: always() && needs.create_release.result == 'failure'
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Delete failed release artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate_release.outputs.version }}';
            
            try {
              // Try to delete the release if it was created
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: version
              });
              
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              
              console.log(`Deleted failed release: ${version}`);
            } catch (error) {
              console.log(`Release ${version} not found or already deleted`);
            }
            
            try {
              // Try to delete the tag if it was created
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${version}`
              });
              
              console.log(`Deleted failed release tag: ${version}`);
            } catch (error) {
              console.log(`Tag ${version} not found or already deleted`);
            }

      - name: Cleanup summary
        run: |
          echo "## ❌ Release Failed - Cleanup Complete" >> $GITHUB_STEP_SUMMARY
          echo "The failed release ${{ needs.validate_release.outputs.version }} has been cleaned up." >> $GITHUB_STEP_SUMMARY
          echo "Please review the errors and create a new release when ready." >> $GITHUB_STEP_SUMMARY
